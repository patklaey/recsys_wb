<?php

/**
 * Core module for the recommender system workbench
 */
 
/** 
 * Define max user ID as the maximum user ID from the book and movie database. 
 * The logged in user will add it's user id to the max user id constant to get a
 * unique user id in the rating tables
 */ 
define('MAX_USER_ID',278858);
define('MOVIE_DB','Movie_Rating_demo');
define('BOOK_DB','Book_Rating_r0_train');

// Variables
define('user_id',$GLOBALS['user']->uid + MAX_USER_ID);

/**
 * Implements hook_menu()
 */
function recsys_wb_menu() {
  $items['myratings'] = array(
    'title' => 'My Ratings', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_myratings',
    'access arguments' => array('access content'),
  );
  $items['myrecommendations'] = array(
    'title' => 'My Recommendations', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_myrecommendations',
    'access arguments' => array('access content'),
  );
  $items['books'] = array(
    'title' => 'Books', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_books',
    'access arguments' => array('access content'),
  );
  $items['movies'] = array(
    'title' => 'Movies', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_movies',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Custom page which displays all the ratings of the currently logged in user
 */
function recsys_wb_myratings() {
  // Prepare the return string
  $return_string = "<h2>Books</h2>";
  
  // Get all the users rating from the database
  $results = db_query("Select * from {" . BOOK_DB . "} where UserID = "
    .":user", array(':user' => user_id) );
    
  // Prepeare the tables headers and rows
  $header = array( t('User ID'), t('Book ID'), t('Rating') );
  $rows = array();
  
  // Check if there are already some ratings
  if( $results->rowCount() == 0 ) {
    $return_string .= "<strong>You haven't rated any books yet</strong></br>";
  }
  else {
    
    // Loop through the results of the DB query and fill in the tables rows
    foreach ($results AS $result)
    {
      $rows[] = array(
        $result->UserID,
        $result->BookID,
        $result->Rating,
      );
    }
    
    // Add the table to the result string
    $return_string .= theme('table', 
                            array('header' => $header, 'rows' => $rows) );
  }
  
  // Add the link to the rating page
  $return_string .= "<p>You can rate books " . l('here','/books') . "</p>";

  // Add the Movie section
  $return_string .= "<h2>Movies</h2>";
  
 // Get all the users rating from the database
  $results = db_query("Select * from {" . MOVIE_DB . "} where UserID = "
    .":user", array(':user' => user_id) );
    
  // Prepeare the tables headers and rows
  $header = array( t('User ID'), t('Movie ID'), t('Rating') );
  $rows = array();
  
  // Check if there are already some ratings
  if( $results->rowCount() == 0 ) {
    $return_string .= "<strong>You haven't rated any movies yet</strong></br>";
  }
  else {
    
    // Loop through the results of the DB query and fill in the tables rows
    foreach ($results AS $result)
    {
      $rows[] = array(
        $result->UserID,
        $result->MovieID,
        $result->Rating,
      );
    }
    
    // Add the table to the result string
    $return_string .= theme('table', 
                            array('header' => $header, 'rows' => $rows) );
  }
  
  // Add the link to the rating page
  $return_string .= "<p>You can rate movies " . l('here','/movies') . "</p>";
  
  // Return the HTML string
  return $return_string;
}

/**
 * Custom page which displays all the recommendations of the currently logged
 * in user
 */
function recsys_wb_myrecommendations() {
  return "No recommendations yet"; 
}

/**
 * Implements hook_block_info
 */
function recsys_wb_block_info() {
  $blocks['book_rating'] = array(
    'info' => t('Recsys workbench book rating'),
  );
  $blocks['movie_rating'] = array(
    'info' => t('Recsys workbench movie rating'),
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view
 */
function recsys_wb_block_view($delta = '')
{
  $block = array();

  // Get the node
  $node = menu_get_object();

  switch ($delta) {
    case 'book_rating':
      $block['subject'] = t('Rate this book');
      
      // Check if the user has already rated this book, so query the rating for
      // this book from this user
      $book_id = field_get_items("node", $node, "field_book_id");
      $book_id = $book_id[0]["value"];
      $results = db_query("Select * from {" . BOOK_DB . "} where UserID = "
        .":user AND BookID = :book", array(':user' => user_id, ':book' => $book_id) );
      
      if ( $results->rowCount() == 0 ) {
        $block['content'] = drupal_get_form('recsys_wb_book_rating_form');
      }
      else {
        $block['content'] = "You have already rated this book!";
      }

      break;

    case 'movie_rating':
      $block['subject'] = t('Rate this movie');
      
      // Check if the user has already rated this book, so query the rating for
      // this book from this user
      $movie_id = field_get_items("node", $node, "field_movie_id");
      $movie_id = $movie_id[0]["value"];
      $results = db_query("Select * from {" . MOVIE_DB . "} where UserID = "
        .":user AND MovieID = :movie", array(':user' => user_id, ':movie' => $movie_id) );
      
      if ( $results->rowCount() == 0 ) {
        $block['content'] = drupal_get_form('recsys_wb_movie_rating_form');
      }
      else {
        $block['content'] = "You have already rated this movie!";
      }
      
      default:
        break;
  }
    
  return $block;
}

/**
 * Custom page which displays all book of the demo section
 */
function recsys_wb_books() {
  return "Here go all books";
}

/**
 * Custom page which displays all movies of the demo section
 */
function recsys_wb_movies() {
  // Get all movies form the database
  $query = db_select('field_data_field_movie_id', 'ids');
  $query->join('field_data_field_year','year','ids.entity_id = year.entity_id');
  $query->join('node', 'node', 'ids.entity_id = node.nid');
  $query->fields('ids',array('entity_id'));
  $query->fields('node',array('title'));
  $query->groupBy('node.title');
  $query->condition('year.field_year_value',2008);
  $results = $query->execute();
  
  $header = array( t('Node ID'));
  $rows = array();
  
  foreach ($results AS $result)
    {
      $id = $result->entity_id;
      $rows[] = array(
        l($result->title,'node/' . $id)
      );
    }
    

  return theme('table', array('header' => $header, 'rows' => $rows) );
}

/**
 * The rate book form
 */
function recsys_wb_book_rating_form()
{
  $form['user_id'] = array(
    '#type' => 'select',
    '#title' => t('Rating:'),
    '#options' => array(
      0 => '0',
      1 => '1',
      2 => '2',
      3 => '3',
      4 => '4',
      5 => '5',
      6 => '6',
      7 => '7',
      8 => '8',
      9 => '9',
      10 => '10',      
    ),
    //'#empty_value' => TRUE,
    '#description' => t('Enter the rating for this book'),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );  
  return $form;
}

/**
 * The rate movie form
 */
function recsys_wb_movie_rating_form()
{
  $form['rating'] = array(
    '#type' => 'select',
    '#title' => t('Rating:'),
    '#options' => array(
      0 => '0',
      1 => '1',
      2 => '2',
      3 => '3',
      4 => '4',
      5 => '5',
      6 => '6',
      7 => '7',
      8 => '8',
      9 => '9',
      10 => '10',      
    ),
    '#description' => t('Enter the rating for this movie'),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );  
  return $form;
}

/**
 * Action to take when recsys_wb_movie_rating_form is submitted
 */
function recsys_wb_movie_rating_form_submit($form, &$form_state) {
  // Get the rating from the form, divide it by 2 to get movielens ratings
  $rating = $form_state['values']['rating'] / 2;
  
  // Get the node
  $node = menu_get_object();
  
  // Get the movies id
  $movie_id = field_get_items("node", $node, "field_movie_id");
  $movie_id = $movie_id[0]["value"];

  // Insert the values into the database
  $result = db_insert( MOVIE_DB )->fields( array(
    'MovieID' => $movie_id,
    'UserID' => user_id,
    'Rating' => $rating,
    'Timestamp' => time(),
  ))->execute();
  
  drupal_set_message("Insert done!");
}