<?php

/**
 * Core module for the recommender system workbench
 */
 
/** 
 * Define max user ID as the maximum user ID from the book and movie database. 
 * The logged in user will add it's user id to the max user id constant to get a
 * unique user id in the rating tables
 */ 
define('MAX_USER_ID',278858);
define('MOVIE_DB_TRAIN','Movie_Rating_demo_train');
define('BOOK_DB_TRAIN','Book_Rating_demo_train');
define('MOVIE_DB_TEST','Movie_Rating_demo_test');
define('BOOK_DB_TEST','Book_Rating_demo_test');

// Variables
define('user_id',$GLOBALS['user']->uid + MAX_USER_ID);

// Load the necessary php files
require_once 'util.php';
require_once 'recommendations.php';
require_once 'forms/forms_view.php';
require_once 'forms/forms_submit.php';
require_once 'statistics.php';
require_once 'php-tail/PHPTail.php';
require_once 'evaluation.php';
require_once 'CF.php';
require_once 'CB.php';
require_once 'evaluation_explain.php';

/**
 * Implements hook_menu()
 */
function recsys_wb_menu() {
  $items['myratings'] = array(
    'title' => 'My Ratings', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_myratings',
    'access callback' => 'user_is_logged_in',
    'weight' => 2,
  );
  $items['myrecommendations'] = array(
    'title' => 'My Recommendations', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_myrecommendations',
    'access callback' => 'user_is_logged_in',
    'weight' => 3,
  );
  $items['content'] = array(
    'title' => 'Content', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_content',
    'access arguments' => array('access content'),
    'weight' => 1,
  );
  $items['content/questions'] = array(
    'title' => 'Questions', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_so_questions',
    'access arguments' => array('access content'),
    'weight' => 3,
  );
  $items['content/goodquestions'] = array(
    'title' => 'Interesting Questions', 
    'type' => MENU_CALLBACK,
    'page callback' => 'recsys_wb_so_good_questions',
    'access arguments' => array('access content'),
    'weight' => 3,
  );
  $items['content/books'] = array(
    'title' => 'Books', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_books',
    'access arguments' => array('access content'),
    'weight' => 1,
  );
  $items['content/movies'] = array(
    'title' => 'Movies', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_movies',
    'access arguments' => array('access content'),
    'weight' => 2,
  );
  $items['statistics'] = array(
    'title' => 'Statistics', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_statistics',
    'access arguments' => array('access content'),
    'weight' => 4,
  );
  $items['statistics/evaluation'] = array(
    'title' => 'Show evaluations', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_evaluation',
    'access arguments' => array('access content'),
    'weight' => 1,
  );
  $items['statistics/runstatistics'] = array(
    'title' => 'Runtime statistics', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_display_stats',
    'access arguments' => array('access content'),
    'weight' => 2,
  );
  $items['learn'] = array(
    'title' => 'Learn', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_explanation',
    'access arguments' => array('access content'),
    'weight' => 5,
  );
  $items['learn/cf'] = array(
    'title' => 'Collaborative filtering', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_explanation_cf',
    'access arguments' => array('access content'),
  );
  $items['learn/cb'] = array(
    'title' => 'Content based filtering', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_explanation_cb',
    'access arguments' => array('access content'),
  );
  $items['learn/evaluation'] = array(
    'title' => 'Evaluating recommender systems', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_explanation_evaluation',
    'access arguments' => array('access content'),
  );
  $items['learn/datasets'] = array(
    'title' => 'Datasets', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_datasets',
    'access arguments' => array('access content'),
  );
  $items['aboutthis'] = array(
    'title' => 'About', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_about',
    'access arguments' => array('access content'),
    'weight' => 6,
  );
  $items['administrate'] = array(
    'title' => 'Admin', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_admin_page',
    'access arguments' => array('administration'),
    'weight' => 7,
  );
  $items['administrate/evaluatealgorithms'] = array(
    'title' => 'Evaluate Algorithms', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_evaluate_algorithms',
    'access arguments' => array('administration'),
  );
  $items['administrate/runrecommender'] = array(
    'title' => 'Run CF Recommender',
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_run_recommender',
    'access callback' => 'user_is_logged_in',
  );
  $items['administrate/contentsimilarity'] = array(
    'title' => 'Content Similarity', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_content_similarity',
    'access arguments' => array('administration'),
  );
  $items['administrate/runcontentrecommender'] = array(
    'title' => 'Run CB Recommender', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_run_content_recommender',
    'access arguments' => array('administration'),
  );
  $items['administrate/projectsetup'] = array(
    'title' => 'Project Setup', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_project_setup',
    'access arguments' => array('administration'),
  );
  $items['logout'] = array(
    'title' => 'Logout',
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_logout',
    'access callback' => 'user_is_logged_in',
    'weight' => 11,
  );
  $items['readmore'] = array(
    'title' => 'Read More',
    'type' => MENU_CALLBACK,
    'page callback' => 'recsys_wb_read_more',
    'access arguments' => array('access content'),
  );
  $items['projects'] = array(
    'title' => 'Projects',
    'type' => MENU_CALLBACK,
    'page callback' => 'recsys_wb_projects',
    'access callback' => 'user_is_logged_in',
  );
  $items['tail'] = array(
    'title' => 'Tail',
    'type' => MENU_CALLBACK,
    'page callback' => 'recsys_wb_tail',
    'access arguments' => array('access content'),
  );
  $items['runevaluations'] = array(
    'title' => 'Run Evaluations',
    'type' => MENU_CALLBACK,
    'page callback' => 'recsys_wb_run_evaluations',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * The administrator page for the project setup
 */
function recsys_wb_project_setup() {
  $opening = variable_get('project_opening','undefined');
  
  $content = "Set the project opening date (currently: $opening) which will be 
displayed on the projects page: ";
  $content .= drupal_render( drupal_get_form('recsys_wb_project_opening_form'));
  $content .= "<br/><br/>To create projects, please go to 'Add Content' and 
create the projects there using the project content type. Don't forget to set 
the correct publish date. Currently the projects look like:<br/><br/>";

  $query = db_select('node','node');
  $query->join(
    'field_data_field_project_group_id',
    'group_id',
    'node.nid = group_id.entity_id'
  );
  $query->join(
    'field_data_field_project_members',
    'members',
    'node.nid = members.entity_id'
  );
  $query->fields('node',array('title','nid','status'));
  $query->fields('group_id',array('field_project_group_id_value'));
  $query->fields('members',array('field_project_members_value'));
  $query->condition('node.type','project');
  $results = $query->execute();
  
  $headers = array(t('Project'),t('Group'),t('Members'),t('Published'));
  $rows = array();
  
  foreach ($results as $result) {
    $result->status == 0 ? "No" : "Yes";
    $rows[] = array(
      l($result->title, "node/" . $result->nid),
      $result->field_project_group_id_value,
      $result->field_project_members_value,
      $result->status == 0 ? "No" : "Yes",
    );
  }
  
  $content .= theme('table',array('header' => $headers, 'rows' => $rows));
  
  return $content;
}
 
/**
 * A page which displays all projects
 */
function recsys_wb_projects() {
  $project_opening_date = variable_get('project_opening','undefined');
  $content = "Projects will be displayed on $project_opening_date<br/><br/>";
  
  $headers = array(t('Project'),t('available'));
  $rows = array();
  
  $results = db_query("Select title,nid from {node} where type='project' and 
status = 1");
  
  foreach ($results as $result) {
    $group = db_query("Select field_project_group_id_value from 
field_data_field_project_group_id where entity_id = :nid", 
        array(':nid' => $result->nid)
    );
    
    $owner = $group->fetchAssoc();
    if ( $owner['field_project_group_id_value'] == -1 ) {
      $rows[] = array( l($result->title, "node/" . $result->nid), "Yes" );
    } else {
       $rows[] = array( $result->title, "No" );
    }
  }
  
  $content .= theme('table', array( 'header' => $headers, 'rows' => $rows) );
  
  return $content;
}
 
 
/**
 * Custom page which displays all the ratings of the currently logged in user
 */
function recsys_wb_myratings() {
  // Prepare the return string
  $return_string = "<strong>Books</strong><br/>";
  
  // Get all the users rating from the database
  $query = db_select(BOOK_DB_TRAIN, 'ratings');
  $query->join(
    'field_data_field_book_id',
    'book_id',
    'ratings.bookid = book_id.field_book_id_value'
  );
  $query->join( 
    'field_data_field_dataset',
    'dataset',
    'dataset.entity_id = book_id.entity_id'
  );
  $query->join('node','node','node.nid = book_id.entity_id');
  $query->fields('node',array('title','nid'));
  $query->fields('ratings',array('bookid','userid','rating'));
  $query->condition('ratings.userid',user_id);
  $query->condition('dataset.field_dataset_value','99');
  $results = $query->execute();
  
  // Prepeare the tables headers and rows
  $header = array( t('User ID'), t('Book'), t('Rating') );
  $rows = array();
  
  // Check if there are already some ratings
  if( $results->rowCount() == 0 ) {
    $return_string .= "<strong>You haven't rated any books yet</strong></br>";
    // Add the link to the rating page
    $return_string .= "<p>You can rate books " . l('here','content/books');
    $return_string .= "</p>";
  }
  else {
    
    // Loop through the results of the DB query and fill in the tables rows
    foreach ($results AS $result)
    {
      $rows[] = array(
        $result->userid,
        l($result->title, 'node/' . $result->nid),
        $result->rating,
      );
    }
    
    // Add the table to the result string
    $return_string .= theme('table', 
                            array('header' => $header, 'rows' => $rows) );
    // Add a link to run recommendation algorithms
    $return_string .= l('Calculate recommendations','administrate/runrecommender');
  }

  // Add the Movie section
  $return_string .= "<br/><br/><strong>Movies</strong><br/>";
  
  // Get all the users rating from the database
  $query = db_select(MOVIE_DB_TRAIN, 'ratings');
  $query->join(
    'field_data_field_movie_id',
    'movie_id',
    'ratings.movieid = movie_id.field_movie_id_value'
  );
  $query->join('node','node','node.nid = movie_id.entity_id');
  $query->fields('node',array('title','nid'));
  $query->fields('ratings',array('movieid','userid','rating'));
  $query->condition('ratings.userid',user_id);
  $results = $query->execute();
  
  // Prepare the tables headers and rows
  $header = array( t('User ID'), t('Movie'), t('Rating') );
  $rows = array();
  
  // Check if there are already some ratings
  if( $results->rowCount() == 0 ) {
    $return_string .= "<strong>You haven't rated any movies yet</strong></br>";
    // Add the link to the rating page
    $return_string .= "<p>You can rate movies " . l('here','content/movies');
    $return_string .= "</p>";
  }
  else {
    
    // Loop through the results of the DB query and fill in the tables rows
    foreach ($results AS $result)
    {
      $rows[] = array(
        $result->userid,
        l( $result->title, 'node/' . $result->nid),
        $result->rating,
      );
    }
    
    // Add the table to the result string
    $return_string .= theme('table', 
                            array('header' => $header, 'rows' => $rows) );
    // Add a link to run recommendation algorithms
    $return_string .= l('Calculate recommendations','administrate/runrecommender');
  }
  
  // Return the HTML string
  return $return_string;
}

/**
 * Custom page which displays all the recommendations of the currently logged
 * in user
 */
function recsys_wb_myrecommendations() {
  return showRecommendations();
}

/**
 * Custom page which displays all the recommendations of the currently logged
 * in user
 */
function recsys_wb_evaluation() {
  return showEvaluation();
}

/**
 * 
 */
function recsys_wb_run_evaluations() {
  runEvaluations();
}

/**
 * 
 */
function recsys_wb_evaluate_algorithms() {
  return drupal_get_form('recsys_wb_evaluate_algorithms_form');
}
 
/**
 * Implements hook_block_info
 */
function recsys_wb_block_info() {
  $blocks['book_rating'] = array(
    'info' => t('Recsys workbench book rating'),
  );
  $blocks['movie_rating'] = array(
    'info' => t('Recsys workbench movie rating'),
  );
  $blocks['content_recommender'] = array(
    'info' => t('Recsys workbench content recommender'),
  );
  $blocks['claim_project'] = array(
    'info' => t('Recsys workbench project selection'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view
 */
function recsys_wb_block_view($delta = '')
{
  $block = array();

  // Get the node
  $node = menu_get_object();

  switch ($delta) {
    case 'book_rating':
      $block['subject'] = t('Rate this book');
      
      // Check if the user has already rated this book, so query the rating for
      // this book from this user
      $book_id = field_get_items("node", $node, "field_book_id");
      $book_id = $book_id[0]["value"];
      
      // Get the books isbn
      $isbn = field_get_items("node", $node, "field_isbn");
      $isbn = $isbn[0]["value"];
      
      if ( isset($_POST['rate_book_form_submitted']) ) {
        
         drupal_add_css( 
            drupal_get_path('module','recsys_wb') . "/css/show_rating.css"
          );
        
        $block['content'] = recsys_wb_display_rating($_POST['rating']);
        recsys_wb_rate_book($book_id, $_POST['rating'], $isbn);
      } else {
      
        $train_results = db_query("Select Rating from {" . BOOK_DB_TRAIN . "} "
          ."where UserID = :user AND BookID = :book", 
          array(':user' => user_id, ':book' => $book_id) );
        $test_results = db_query("Select Rating from {" . BOOK_DB_TEST . "} where"
          ." UserID = :user AND BookID = :book", 
          array(':user' => user_id, ':book' => $book_id) );
        
        if ( $test_results->rowCount() == 0 && $train_results->rowCount() == 0 ) {
          
          drupal_add_css( 
            drupal_get_path('module','recsys_wb') . "/css/rating.css"
          );
          
          $block['content'] = '<form method="post" action="">
<p class="rating">
    <input type="radio" id="star5" name="rating" value="5" /><label class = "full" for="star5" title="Awesome - 5 stars"></label>
    <input type="radio" id="star4half" name="rating" value="4.5" /><label class="half" for="star4half" title="Pretty good - 4.5 stars"></label>
    <input type="radio" id="star4" name="rating" value="4" /><label class = "full" for="star4" title="Pretty good - 4 stars"></label>
    <input type="radio" id="star3half" name="rating" value="3.5" /><label class="half" for="star3half" title="Meh - 3.5 stars"></label>
    <input type="radio" id="star3" name="rating" value="3" /><label class = "full" for="star3" title="Meh - 3 stars"></label>
    <input type="radio" id="star2half" name="rating" value="2.5" /><label class="half" for="star2half" title="Kinda bad - 2.5 stars"></label>
    <input type="radio" id="star2" name="rating" value="2" /><label class = "full" for="star2" title="Kinda bad - 2 stars"></label>
    <input type="radio" id="star1half" name="rating" value="1.5" /><label class="half" for="star1half" title="Meh - 1.5 stars"></label>
    <input type="radio" id="star1" name="rating" value="1" /><label class = "full" for="star1" title="Sucks big time - 1 star"></label>
    <input type="radio" id="starhalf" name="rating" value="0.5" /><label class="half" for="starhalf" title="Sucks big time - 0.5 stars"></label>
</p><br/><br/><br/>
<input type="Submit" value="Rate this book" name="rate_book_form_submitted">
</form>';
        }
        else {
          $row = $train_results->fetchAssoc();
          if ( $row == null )
            $row = $test_results->fetchAssoc();
          
           drupal_add_css( 
              drupal_get_path('module','recsys_wb') . "/css/show_rating.css"
            );
          
          $block['content'] = recsys_wb_display_rating($row["rating"]);
        }
      }

      break;

    case 'movie_rating':
      $block['subject'] = t('Rate this movie');
      
      $movie_id = field_get_items("node", $node, "field_movie_id");
      $movie_id = $movie_id[0]["value"];
      
      if ( isset($_POST['rate_movie_form_submitted']) ) {
        
         drupal_add_css( 
            drupal_get_path('module','recsys_wb') . "/css/show_rating.css"
          );
        
        $block['content'] = recsys_wb_display_rating($_POST['rating']);
        recsys_wb_rate_movie($movie_id, $_POST['rating']);
      } else {
      
        // Check if the user has already rated this book, so query the rating for
        // this book from this user
        $train_results = db_query("Select Rating from {" . MOVIE_DB_TRAIN . "} "
          ."where UserID= :user AND MovieID = :movie",
          array(':user' => user_id, ':movie' => $movie_id) );
        $test_results = db_query("Select Rating from {" . MOVIE_DB_TEST . "} "
          ."where UserID= :user AND MovieID = :movie",
          array(':user' => user_id, ':movie' => $movie_id) );
        
        if ( $test_results->rowCount() == 0 && $train_results->rowCount() == 0 ) {
          
          drupal_add_css( 
            drupal_get_path('module','recsys_wb') . "/css/rating.css"
          );
          
          $block['content'] = '<form method="post" action="">
<p class="rating">
    <input type="radio" id="star5" name="rating" value="5" /><label class = "full" for="star5" title="Awesome - 5 stars"></label>
    <input type="radio" id="star4half" name="rating" value="4.5" /><label class="half" for="star4half" title="Pretty good - 4.5 stars"></label>
    <input type="radio" id="star4" name="rating" value="4" /><label class = "full" for="star4" title="Pretty good - 4 stars"></label>
    <input type="radio" id="star3half" name="rating" value="3.5" /><label class="half" for="star3half" title="Meh - 3.5 stars"></label>
    <input type="radio" id="star3" name="rating" value="3" /><label class = "full" for="star3" title="Meh - 3 stars"></label>
    <input type="radio" id="star2half" name="rating" value="2.5" /><label class="half" for="star2half" title="Kinda bad - 2.5 stars"></label>
    <input type="radio" id="star2" name="rating" value="2" /><label class = "full" for="star2" title="Kinda bad - 2 stars"></label>
    <input type="radio" id="star1half" name="rating" value="1.5" /><label class="half" for="star1half" title="Meh - 1.5 stars"></label>
    <input type="radio" id="star1" name="rating" value="1" /><label class = "full" for="star1" title="Sucks big time - 1 star"></label>
    <input type="radio" id="starhalf" name="rating" value="0.5" /><label class="half" for="starhalf" title="Sucks big time - 0.5 stars"></label>
</p><br/><br/><br/>
<input type="Submit" value="Rate this movie" name="rate_movie_form_submitted">
</form>';
          
        }
        else {
          $row = $train_results->fetchAssoc();
          if ( $row == null )
            $row = $test_results->fetchAssoc();
          
           drupal_add_css( 
              drupal_get_path('module','recsys_wb') . "/css/show_rating.css"
            );
          
          $block['content'] = recsys_wb_display_rating($row["rating"]);
        }
      }
      break;
      
    case 'content_recommender':
      $block['subject'] = t('Similar Questions');
      $content = "";
      $nid = "";
      if ($node = menu_get_object()) {
        // Get the nid
        $nid = $node->nid;
      }
      $query = db_select('recsys_wb_content_similarity','questions');
      $query->fields(
        'questions',
        array(
          'source_entity_id',
          'target_entity_id',
          'similarity'
        )
      );
      $query->orderBy('questions.similarity','DESC');
      $query->condition('questions.app_id',-1);
      $query->condition('questions.similarity',0.1,'>');
      $query->condition(
        db_or()
        ->condition('questions.source_entity_id',$nid)
        ->condition('questions.target_entity_id',$nid)
      );
      $query->range(0,5);
      $results = $query->execute();
      
      if ( $results->rowCount() > 0 ){
        $similar_questions = array();
    
        foreach ($results AS $result)
        {
          if ( $result->source_entity_id == $nid ) {
            $similar_questions[] = array(
              $result->target_entity_id,
              $result->similarity
            );
          } else {
            $similar_questions[] = array(
              $result->source_entity_id,
              $result->similarity
            );
          }
        }
        
        
        foreach( $similar_questions AS $question ) {
          $content .= getQuestionLinkFromNid($question[0]) . " (similarity " 
            . $question[1] . ")<br/>";
        }  
      } else {
        $content = "No similar questions found";
      }
      
      $block['content'] = $content;
      break;
      
    case 'claim_project':
      $block['title'] = "Select this project";
      
      // Check if the project is already taken
      $result = db_query("Select field_project_group_id_value from 
field_data_field_project_group_id where entity_id = :nid", 
        array(':nid' => $node->nid)
      );
      
      $content = "";
      $group = $result->fetchAssoc();
      if ( $group['field_project_group_id_value'] == -1 ) {
        $content = drupal_render(
          drupal_get_form(
            'recsys_wb_select_project_form'
          )
        );
      } else {
        $content = "Group " . $group['field_project_group_id_value'];
        $content .= " owns this project";
      }
      
      $block['content'] = $content;

      break;
      
    default:
      break;
  }
    
  return $block;
}

/**
 * Custom page which displays all book of the demo section
 */
function recsys_wb_books() {
  // Get all movies form the database
  $query = db_select('field_data_field_dataset', 'dataset')
    ->extend('PagerDefault')->limit(100);
  $query->join('node', 'node', 'dataset.entity_id = node.nid');
  $query->fields('dataset',array('entity_id'));
  $query->fields('node',array('title'));
  $query->orderBy('node.title');
  $query->condition('dataset.field_dataset_value',99);

  $results = $query->execute();
  
  $header = array( t('Book'));
  $rows = array();
  
  foreach ($results AS $result)
  {
    $rows[] = array(
      l($result->title,'node/' . $result->entity_id)
    );
  }
  
  $output =  theme('table', array('header' => $header, 'rows' => $rows) );
  return $output . theme('pager');
}

/**
 * Custom page which displays all movies of the demo section
 */
function recsys_wb_movies() {
  // Get all movies form the database
  $query = db_select('field_data_field_year', 'year')
    ->extend('PagerDefault')->limit(100);
  $query->join('node', 'node', 'year.entity_id = node.nid');
  $query->fields('year',array('entity_id'));
  $query->fields('node',array('title'));
  $query->orderBy('node.title');
  $query->condition('year.field_year_value',2008);
  $results = $query->execute();
  
  $header = array( t('Node ID'));
  $rows = array();
  
  foreach ($results AS $result)
    {
      $id = $result->entity_id;
      $rows[] = array(
        l($result->title,'node/' . $id)
      );
    }

  $output =  theme('table', array('header' => $header, 'rows' => $rows) );
  return $output . theme('pager');
}

/**
 * Custom page to run recommenders
 */
function recsys_wb_run_recommender() {
  return drupal_get_form('recsys_wb_run_recommender_form');
}

/**
 * Custom page to run content recommender
 */
function recsys_wb_run_content_recommender() {
  $content = "Create TFIDF vectors: ";
  $content .= drupal_render(
    drupal_get_form('recsys_wb_create_tfidf_vectors_form')
  );
  $content .= "<br/>Run content similarity algorithm: ";
  $content .= drupal_render(
    drupal_get_form('recsys_wb_run_content_recommender_form')
  );
  
  return $content;
}

/** 
 * Follow the log file of the different algorithm processes
 */
function recsys_wb_tail() {
  /**
   * Initilize a new instance of PHPTail
   * @var PHPTail
   */
  // Get the UUID of the log file
  $uuid = $_GET['uuid'];
  // Get the log directory
  $log_dir = DRUPAL_ROOT . DIRECTORY_SEPARATOR 
    . drupal_get_path("module","recsys_wb") . DIRECTORY_SEPARATOR . "log";
  // Get the according file
  $file = $log_dir . DIRECTORY_SEPARATOR . $uuid . ".log";
  // Check if the file exists, if not return some error message
  if ( ! file_exists ( $file ) )
    return "Invalid file: " . $file;
  $tail = new PHPTail($file);
  // Set the origin to 311 bytes to not show the user which configuration file
  // we are using
  $tail = $tail->setOrigin(311);

  /**
   * We're getting an AJAX call
   */
  if(isset($_GET['ajax']))  {
    echo $tail->getNewLines($_GET['lastsize'], $_GET['grep'], $_GET['invert']);
    die();
  }
  /**
   * Regular GET/POST call, print out the GUI
   */
  $tail->generateGUI();
}

/**
 * 
 */
function recsys_wb_explanation () {
  $cf = l("Collaborative filtering",'learn/cf');
  $cb = l("Content based filtering",'learn/cb');
  $evaluation = l("Evaluation metrics",'learn/evaluation');
  
  $return_string = "There is a lot where you can learn about recommender ";
  $return_string .= "systems.
<ul>
  <li>$cf<br/>
    Learn about collaborative filtering. What is the idea behind, what
    are the different similarity methods and see some examples how to calculate
    them. 
  </li>
  <li>$cb<br/>
    Learn about content filtering. What is the idea behind, what
    are the calculations to represent a document in a form which can be 
    mathematically compared to other documents etc. 
  </li>
  <li>$evaluation<br/>
    Learn about evaluation. What is the idea behind, what are the different 
    metrics etc.
  </li>
</ul>
";
  
  // Also provide a link to the datasets
  $return_string .= l("Here", "learn/datasets") . " you can find out more about 
the datasets<br/>";
  return $return_string;
}

/**
 * Explain collaborative filtering
 */
function recsys_wb_explanation_cf() {
  $algorithm_name = null;
  $explain = "";
  $marking = MARK_USER2USER;
  
  // Check if the GET[algorithm] method is set
  if ( isset($_GET['algorithm']) )
    $algorithm_name = getRecommenderAppName( $_GET['algorithm'] );
  
  if ( $algorithm_name != null ) {
    $explain = "<strong>Explanation for " 
      . getRecommenderAppTitle( $_GET['algorithm'] ) . "</strong>";
  }
  else {
          
    $checked_user2user = 'checked';
    $checked_item2item = '';
    
    drupal_add_css(
      drupal_get_path('module', 'recsys_wb') . '/css/radio-button.css'
    );
    
    // Check if a POST request was sent if yes check which type it is
    if ( isset($_POST['explain']) ) {
      if ( $_POST['explain'] == 'user2user') {
        $checked_user2user = 'checked';
        $checked_item2item = '';
        $marking = MARK_USER2USER;
      }
      
      if ( $_POST['explain'] == 'item2item') {
        $checked_user2user = '';
        $checked_item2item = 'checked';
        $marking = MARK_ITEM2ITEM;
      }
    }
    
    $explain .= "<strong>Similarity examples:</strong>";
    $explain .= "
<div class='toggle-btn-grp joint-toggle'>
<form method='POST'>
  <label class='toggle-btn'>
    <input onChange='this.form.submit();' $checked_user2user type='radio' value='user2user' name='explain'/>
    User-User
  </label>
  <label class='toggle-btn'>
    <input onChange='this.form.submit();' $checked_item2item type='radio' value='item2item' name='explain'/>
    Item-Item
  </label>
</form>
</div>";

    // Add the table of contents
    $explain .= recsys_wb_explanation_cf_table_of_contents();  
    
  }

  // Explain the basics of collaborative filtering
  $explain .= "<a href='#' name='cf'></a>";
  $explain .= recsys_wb_explain_cf();
  
  $explain_user2user = preg_match("/_u2u_/", $algorithm_name);
  $explain_item2item = preg_match("/_i2i_/", $algorithm_name);
  $explain_cosine = preg_match("/_cosine/", $algorithm_name);
  $explain_euclidean = preg_match("/_euclidean/", $algorithm_name);
  $explain_pearson = preg_match("/_pearson/", $algorithm_name);
  $explain_cityblock = preg_match("/_cityblock/", $algorithm_name);
  $explain_loglikelihood = preg_match("/_loglikelihood/", $algorithm_name);
    
  
  $explain .= "<a href='#' name='algorithm'></a>";
  if( $explain_user2user || $algorithm_name == null ){
    $explain .= "<a href='#' name='user2user'></a>"; 
    $explain .= recsys_wb_explain_user2user();
  }
  
  if ( $explain_item2item )
  {
    $explain .= "<a href='#' name='item2item'></a>";
    $explain .= recsys_wb_explain_item2item();
    $marking = MARK_ITEM2ITEM;
  }
  else{
    if ( $algorithm_name == null ) {
      $explain .= "<a href='#' name='item2item'></a>";
      $explain .= recsys_wb_explain_item2item();
    }
  }

  $explain .= "<a href='#' name='similarity'></a>";
  if ( $explain_cosine || $algorithm_name == null ) {
    $explain .= "<a href='#' name='cosine'></a>"; 
    $explain .= recsys_wb_explain_cosine($marking);
  }
  
  if ( $explain_pearson || $algorithm_name == null ){
    $explain .= "<a href='#' name='pearson'></a>"; 
    $explain .= recsys_wb_explain_pearson($marking);
  }
  
  if ( $explain_euclidean || $algorithm_name == null ){
    $explain .= "<a href='#' name='euclidean'></a>"; 
    $explain .= recsys_wb_explain_euclidean($marking);
  }
  
  if ( $explain_cityblock || $algorithm_name == null ){
    $explain .= "<a href='#' name='cityblock'></a>"; 
    $explain .= recsys_wb_explain_cityblock($marking);
  }
  
  if ( $explain_loglikelihood || $algorithm_name == null ){
    $explain .= "<a href='#' name='loglikelihood'></a>"; 
    $explain .= recsys_wb_explain_loglikelihood($marking);
  }
  
  return $explain;
}

/**
 * Table of contents for the explanation section
 */
function recsys_wb_explanation_cf_table_of_contents() {
  $table_of_contents = "
<ul style='list-style-type:none'>
  <li><strong><a href='#cf'>Collaborative filtering</a></strong></li>
  <li><strong><a href='#algorithm'>Algorithm type</a></strong></li>
  <ul style='list-style-type:none'>
    <li><a href='#user2user'>User-User Recommendation</a></li>
    <li><a href='#item2item'>Item-Item Recommendation</a></li>
  </ul>
  <li><strong><a href='#similarity'>Similarity methods</a></strong></li>
  <ul style='list-style-type:none'>
    <li><a href='#cosine'>Cosine similarity</a></li>
    <li><a href='#pearson'>Pearson similarity</a></li>
    <li><a href='#euclidean'>Euclidean similarity</a></li>
    <li><a href='#cityblock'>Cityblock similarity</a></li>
    <li><a href='#loglikelihood'>Loglikelihood similarity</a></li>
  </ul>
</ul>
";
  return $table_of_contents;
}

/**
 * Explain content based filtering
 */
function recsys_wb_explanation_cb() {
  $explanation = recsys_wb_explain_cb();
  $explanation .= recsys_wb_explain_tfidf();
  $explanation .= recsys_wb_explain_content_similarity();
  return $explanation;
}

/**
 * Explain the evaluation methods
 */
function recsys_wb_explanation_evaluation() {
  $metric_name = null;
  
  // Check if the GET[algorithm] method is set
  if ( isset($_GET['metric']) )
    $metric_name = $_GET['metric'];
    
  $explanation = recsys_wb_explain_evaluation();
  
  if ( $metric_name == 'mae' || $metric_name == null )
    $explanation .= recsys_wb_explain_mae();
  
  if ( $metric_name == 'rmse' || $metric_name == null )
    $explanation .= recsys_wb_explain_rmse();
    
  if ( $metric_name == 'mrr' || $metric_name == null )
  $explanation .= recsys_wb_explain_mrr();
  
  if ( $metric_name == 'ndcg' || $metric_name == null )
    $explanation .= recsys_wb_explain_ndgc();

  return $explanation;
  
}
 
/**
 * 
 */
function recsys_wb_content() {
  $books = l("Books",'content/books');
  $movies = l("Movies",'content/movies');
  $questions = l("Stackoverflow questions",'content/questions');
  
  $return_string = "There are 3 different content types which you can browse: ";
  $return_string .= "
<ul>
  <li>$books<br/>A list of selected books from the Amazone Online Store</li>
  <li>$movies<br/>A list of selected movies from the MovienLens project</li>
  <li>$questions<br/>A list of selected questions from the stackoverflow website</li>
</ul>
";
  
  return $return_string;
}

/**
 * 
 */
function recsys_wb_statistics() {
  $evaluation = l("Algorithm Evaluation",'statistics/evaluation');
  $stats = l("Run Statistics",'statistics/runstatistics');
  
  $return_string = "There are 2 different types of statistics";
  $return_string .= "
<ul>
  <li>$evaluation<br/>See detailed evaluation about the different recommender
    algorithms. 
  </li>
  <li>$stats<br/>See statistics of the recommender algorithm run like number of
    users, number of items etc.
  </li>
</ul>
";
  
  return $return_string;
}


/**
 * All questions in the demo dataset
 */
function recsys_wb_so_questions() {
  // Get all movies form the database
  $query = db_select('field_data_field_question_dataset', 'dataset');
  $query->join('node', 'node', 'dataset.entity_id = node.nid');
  $query->fields('dataset',array('entity_id'));
  $query->fields('node',array('title'));
  $query->orderBy('node.title');
  $query->condition('dataset.field_question_dataset_value','demo');

  $results = $query->execute();
  
  $header = array( t('Question'));
  $rows = array();
  
  foreach ($results AS $result)
  {
    $rows[] = array(
      l($result->title,'node/' . $result->entity_id)
    );
  }
  
  $output = l(
    "These questions might be interesting too ... " , 
    'content/goodquestions'
  );
  $output .= "<br/><br/>";
  $output .= theme('table', array('header' => $header, 'rows' => $rows) );
  return $output;
}

/**
 * A list of questions which have similar questions (all questions are from the
 * demo dataset)
 */
function recsys_wb_so_good_questions() {
  $query = db_select('recsys_wb_content_similarity', 'sim');
  $query->fields('sim',array(
    'source_entity_id',
    'similarity')
  );
  $query->orderBy('sim.similarity','DESC');
  $query->condition('sim.app_id',-1);
  $query->range(0,25);
  $results = $query->execute();
  
  $header = array( t('Question'));
  $rows = array();
  
  foreach ($results AS $result)
    {
      $rows[] = array(
        getQuestionLinkFromNid($result->source_entity_id),
      );
    }

  $output =  theme('table', array('header' => $header, 'rows' => $rows) );
  return $output;
}

/**
 * A page which displays content similarity
 */
function recsys_wb_content_similarity() {
  $query = db_select('recsys_wb_content_similarity', 'sim');
  $query->fields('sim',array(
    'source_entity_id',
    'target_entity_id',
    'similarity')
  );
  $query->orderBy('sim.similarity','DESC');
  $query->condition('sim.app_id',-1);
  $query->range(0,50);
  $results = $query->execute();
  
  $header = array( t('Source'), t('Target'), t('Score'));
  $rows = array();
  
  foreach ($results AS $result)
    {
      $rows[] = array(
        l($result->source_entity_id,'node/' . $result->source_entity_id),
        l($result->target_entity_id,'node/' . $result->target_entity_id),
        $result->similarity,
      );
    }

  $output =  theme('table', array('header' => $header, 'rows' => $rows) );
  return $output;
}

/**
 * Provide and explain the datasets
 */
function recsys_wb_datasets() {
  
  // Explain the datasets
  $movies_dataset_citation = "<sup>" . l(
    "[1]", 
    "aboutthis", 
    array( 'fragment' => 'datasets')
  ) . "</sup>";
  $books_dataset_citation = "<sup>" . l(
    "[2]", 
    "aboutthis", 
    array( 'fragment' => 'datasets')
  ) . "</sup>";
  $questions_dataset_citation = "<sup>" . l(
    "[3]", 
    "aboutthis", 
    array( 'fragment' => 'datasets')
  ) . "</sup>";  
  
  
  $return = "Below you will find a list of all available datasets. They all 
contain the following files:
<ul>
  <li>Movie Ratings Dataset$movies_dataset_citation<br/>
    A small, medium and large dataset (SQL-Table) which all have train and test
    set. The rows contain the following values:
    <ul>
      <li>User ID</li>
      <li>Movie ID (this ID corresponds to the Movie ID of the MovieLens 
        database)</li>
      <li>Rating (1 to 5; stepsize 0.5)</li>
      <li>Unix timestamp of the rating</li>
    </ul>
  </li>
  <li>Book Ratings Dataset$books_dataset_citation<br/>
    A small, medium and large dataset (SQL-Table) which all have train and test
    set. The rows contain the following values:
    <ul>
      <li>User ID</li>
      <li>Book ID</li>
      <li>Book ISBN</li>
      <li>Rating (1 to 10; stepsize 1)</li>
    </ul>
  </li>
  <li>Question Dataset$questions_dataset_citation<br/>
    A small, medium and large dataset (CSV). The rows contain the 
    following values:
    <ul>
      <li>Question ID</li>
      <li>Title</li>
      <li>Body</li>
      <li>Score</li>
      <li>Creation date</li>
      <li>View count</li>
      <li>Answer count</li>
      <li>Accepted answer</li>
      <li>Tags</li>
      <li>Datset number</li>
    </ul>
    This dataset does not have train and test set as there is no ground truth
    on which one could evaluate the recommender algorithms.
  </li>
  </li>
</ul>";
  
  // Get the path to the download base directory
  $download_base_dir = DRUPAL_ROOT . DIRECTORY_SEPARATOR 
    . drupal_get_path("module","recsys_wb") . DIRECTORY_SEPARATOR . "datasets" 
    . DIRECTORY_SEPARATOR;
  
  // Get all files in the datasets folder (we have at least the demo datasets
  // from the installation)
  $datasets = scandir($download_base_dir);
  
  $return .= "<br/>The following datasets are available: <ul>";
  for ($i=2; $i < sizeof($datasets); $i++) {
    if ( preg_match("/.*\.zip$/", $datasets[$i]) === 1 ) {
      $return .= "<li><a href='" . $download_base_dir . $datasets[$i] . "'>";
      $return .= $datasets[$i] . "</a></li>";
    }
  }
  $return .= "</ul>";
  
  return $return;
}

/**
 * The admin page
 */
function recsys_wb_admin_page() {
  return "
<ul>
  <li>" . l("Show content similarity", "administrate/contentsimilarity") ."</li>
  <li>" . l("Evaluate algorithms", "administrate/evaluatealgorithms") . "</li>
  <li>" . l("Run CB recommender", "administrate/runcontentrecommender") . "</li>
  <li>" . l("Run CF recommender", "administrate/runrecommender") . "</li>
</ul>";
}

/**
 * Read more about everything
 */
function recsys_wb_read_more() {
  if ( user_is_logged_in() ) {
    $papers_path = DRUPAL_ROOT . DIRECTORY_SEPARATOR 
    . drupal_get_path("module","recsys_wb") . DIRECTORY_SEPARATOR . "papers";
    $content = "<h2>Recommender System in General</h2>";
    $content .= "<ul>";
    $content .= "<li><a href='$papers_path/recommender_systems.pdf' target='_blank'>Recommender Systems</a></li>";
    $content .= "<li><a href='$papers_path/recommender_system_survey.pdf' target='_blank'>Recommender System Survey</a></li>";
    $content .= "<li><a href='$papers_path/recommender_system_from_algorithms_to_user_experience.pdf' target='_blank'>Recommender systems: from algorithms to user experience</a></li>";
    $content .= "</ul>";
    $content .= "<h2>Collaborative Filtering</h2>";
    $content .= "<ul>";
    $content .= "<li><a href='$papers_path/Item-Based_Collaborative_Filtering_Recommendation_Algorithms.pdf' target='_blank'>Item-Based Collaborative Filtering Recommendation Algorithms</a></li>";
    $content .= "<li><a href='$papers_path/Using_Graph_Partitioning_Techniques_for_Neighbour.pdf' target='_blank'>Using Graph Partitioning Techniques for Neighbour Selection in User-Based Collaborative Filtering</a></li>";
    $content .= "</ul>";
    $content .= "<h2>Content Based Filtering</h2>";
    $content .= "<ul>";
    $content .= "<li><a href='$papers_path/A_topic-based_recommender_system_for_electronic_marketplace_platforms.pdf' target='_blank'>A topic-based recommender system for electronic marketplace platforms</a></li>";
    $content .= "<li><a href='$papers_path/Combining_Content_with_User_Preferences_for_TED_Lecture_Recommendation.pdf target='_blank''>Combining Content with User Preferences for TED Lecture Recommendation</a></li>";
    $content .= "<li><a href='$papers_path/Personalized_News_Recommendation_with_Context_Trees.pdf' target='_blank'>Personalized News Recommendation with Context Trees</a></li>";
    $content .= "</ul>";
    $content .= "<h2>Evaluating Recommender Systems</h2>";
    $content .= "<ul>";
    $content .= "<li><a href='$papers_path/Item-Based_Collaborative_Filtering_Recommendation_Algorithms.pdf' target='_blank'>Item-Based Collaborative Filtering Recommendation Algorithms</a></li>";
    $content .= "<li><a href='$papers_path/Evaluating_Collaborative_Filtering_Recommender_Systems.pdf' target='_blank'>Evaluating Collaborative Filtering Recommender Systems</a></li>";
    $content .= "</ul>";
  } else {
    $content = "<h2>Recommender System in General</h2>";
    $content .= "<ul>";
    $content .= "<li>" . l(
      "Recommender Systems", 
      "http://www.sciencedirect.com/science/article/pii/S0370157312000828",
      array(
        'attributes' => array('target' => '_blank') 
      )
    ) . "</li>";
    $content .= "<li>" . l("
      Recommender System Survey", 
      "http://www.sciencedirect.com/science/article/pii/S0950705113001044",
      array(
        'attributes' => array('target' => '_blank') 
      )
    ) . "</li>";
    $content .= "<li>" . l(
      "Recommender systems: from algorithms to user experience", 
      "http://link.springer.com/article/10.1007/s11257-011-9112-x",
      array(
        'attributes' => array('target' => '_blank') 
      )
    ) . "</li>";
    $content .= "</ul>";
    $content .= "<h2>Collaborative Filtering</h2>";
    $content .= "<ul>";
    $content .= "<li>" . l(
      "Item-Based Collaborative Filtering Recommendation Algorithms", 
      "http://dl.acm.org/citation.cfm?id=372071",
      array(
        'attributes' => array('target' => '_blank') 
      )
    ) . "</li>";
    $content .= "<li>" . l(
      "Using Graph Partitioning Techniques for Neighbour Selection in User-Based Collaborative Filtering", 
      "http://dl.acm.org/citation.cfm?id=2365997",
      array(
        'attributes' => array('target' => '_blank') 
      )
    ) . "</li>";
    $content .= "</ul>";
    $content .= "<h2>Content Based Filtering</h2>";
    $content .= "<ul>";
    $content .= "<li>" . l
      ("A topic-based recommender system for electronic marketplace platforms", 
      "http://www.sciencedirect.com/science/article/pii/S0957417413000274",
      array(
        'attributes' => array('target' => '_blank') 
      )
    ) . "</li>";
    $content .= "<li>" . l(
      "Combining Content with User Preferences for TED Lecture Recommendation", 
      "http://dl.acm.org/citation.cfm?id=2507166",
      array(
        'attributes' => array('target' => '_blank') 
      )
    ) . "</li>";
    $content .= "<li>" . l(
      "Personalized News Recommendation with Context Trees", 
      "http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6576551",
      array(
        'attributes' => array('target' => '_blank') 
      )
    ) . "</li>";
    $content .= "</ul>";
    $content .= "<h2>Evaluating Recommender Systems</h2>";
    $content .= "<ul>";
    $content .= "<li>" . l(
      "Item-Based Collaborative Filtering Recommendation Algorithms", 
      "http://dl.acm.org/citation.cfm?id=372071",
      array(
        'attributes' => array('target' => '_blank') 
      )
    ) . "</li>";
    $content .= "<li>" . l(
      "Evaluating Collaborative Filtering Recommender Systems", 
      "http://dl.acm.org/citation.cfm?id=963772",
      array(
        'attributes' => array('target' => '_blank') 
      )
    ) . "</li>";
    $content .= "</ul>";
  }
  return $content;
}

/**
 * The about section
 */
function recsys_wb_about() {
  $andreas_meier = l(
    "Prof. Dr. Andreas Meier", 
    "http://diuf.unifr.ch/main/is/members/andreas-meier",
    array(
      'attributes' => array('target' => '_blank') 
    )
  );
  
  $luis_teran = l(
    "Dr. Luis Teran",
    "http://diuf.unifr.ch/main/is/members/luis-teran",
    array(
      'attributes' => array('target' => '_blank') 
    )
  );
  
  $is_group = l(
    "Information Systems Research Group",
    "http://diuf.unifr.ch/main/is/",
    array(
      'attributes' => array('target' => '_blank') 
    )
  );
  
  $unifr = l(
    "University of Freiburg (CH)",
    "http://www.unifr.ch/home/welcomeE.php",
    array(
      'attributes' => array('target' => '_blank') 
    )
  );
  $return = "This workbench the practical part of my master thesis \"A Workbench
 for Comparing Collaborative- and Content-Based Algorithms for Recommendations\"
 supervised by $andreas_meier and $luis_teran form the $is_group at the $unifr";
  
  $me = l("Pat Kläy","mailto:pat.klaey@unifr.ch");
  $return .= "<h2>About me</h2>My name is $me, I obtained my Bachelor degree at 
the $unifr and also started my Master here. Obviously I joined the $is_group 
research group for my Master Thesis and this workbench is the outcome.";
  
  
  $return .= "<h2>Datasets</h2>";
  
  $grouplens = l(
    "GroupLens dataset",
    "http://grouplens.org/datasets/movielens/",
    array(
      'attributes' => array('target' => '_blank') 
    )
  );
  $movielens = l(
    "MovieLens",
    "https://movielens.org/",
    array(
      'attributes' => array('target' => '_blank') 
    )
  );
  $book_bx = l(
    "Book-Crossing Dataset",
    "http://www2.informatik.uni-freiburg.de/~cziegler/BX/",
    array(
      'attributes' => array('target' => '_blank') 
    )
  );
  $stackoverflow = l(
    "Stackexchange data dump",
    "https://archive.org/details/stackexchange",
    array(
      'attributes' => array('target' => '_blank') 
    )
  );
  
  $return .= "<a href='#' name='datasets'>
<ol>
  <li>Movie database: $grouplens from the $movielens project</li>
  <li>Book dataset: $book_bx (c.f. References)</li>
  <li>Stackoverflow dataset: $stackoverflow</li>
</ol>";
  
  $return .= "<a href='#' name='References'>";
  $return .= "<h2>References</h2>";
  $bx_paper = l(
    "Improving Recommendation Lists Through Topic Diversification.",
    "http://www2.informatik.uni-freiburg.de/~dbis/Publications/05/WWW05.html",
    array(
      'attributes' => array('target' => '_blank') 
    )
  );
  $return .= "
<ol>
  <li>$bx_paper<br/>
    Cai-Nicolas Ziegler, Sean M. McNee, Joseph A. Konstan, Georg Lausen; 
    Proceedings of the 14th International World Wide Web Conference (WWW '05), 
    May 10-14, 2005, Chiba, Japan. To appear.
  </li>
  <li>Dietmar Jannach, Markus Zanker, Alexander Felfernig, and Gerhard Friedrich
  . Recommender Systems: An Introduction. Cambridge University Press, 1 edition,
    September 2010.
  </li>
  <li>J Konstan and M Ekstrand. Introduction to recommender systems.
    https://www.coursera.org/course/recsys, 2013 (accessed March 30, 2014).
  </li>
</ol>";
  
  return $return;
}

/**
 * The logout funtion
 */
function recsys_wb_logout() {
  module_load_include('pages.inc', 'user');
  user_logout();
  return "See you soon!";
}
