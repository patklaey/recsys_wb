<?php

/**
 * Core module for the recommender system workbench
 */
 
/** 
 * Define max user ID as the maximum user ID from the book and movie database. 
 * The logged in user will add it's user id to the max user id constant to get a
 * unique user id in the rating tables
 */ 
define('MAX_USER_ID',278858);
define('MOVIE_DB_TRAIN','Movie_Rating_demo_train');
define('BOOK_DB_TRAIN','Book_Rating_demo_train');
define('MOVIE_DB_TEST','Movie_Rating_demo_test');
define('BOOK_DB_TEST','Book_Rating_demo_test');

// Variables
define('user_id',$GLOBALS['user']->uid + MAX_USER_ID);

// Load the necessary php files
require_once 'util.php';
require_once 'recommendations.php';
require_once 'forms/forms_view.php';
require_once 'forms/forms_submit.php';
require_once 'statistics.php';
require_once 'php-tail/PHPTail.php';
require_once 'evaluation.php';
require_once 'explain.php';

/**
 * Implements hook_menu()
 */
function recsys_wb_menu() {
  $items['myratings'] = array(
    'title' => 'My Ratings', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_myratings',
    'access arguments' => array('access content'),
  );
  $items['myrecommendations'] = array(
    'title' => 'My Recommendations', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_myrecommendations',
    'access arguments' => array('access content'),
  );
  $items['books'] = array(
    'title' => 'Books', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_books',
    'access arguments' => array('access content'),
  );
  $items['movies'] = array(
    'title' => 'Movies', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_movies',
    'access arguments' => array('access content'),
  );
  $items['statistics'] = array(
    'title' => 'Statistics', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_display_stats',
    'access arguments' => array('access content'),
  );
  $items['runrecommender'] = array(
    'title' => 'Run recommender',
    'type' => MENU_CALLBACK,
    'page callback' => 'recsys_wb_run_recommender',
    'access arguments' => array('access content'),  
  );
  $items['tail'] = array(
    'title' => 'Tail',
    'type' => MENU_CALLBACK,
    'page callback' => 'recsys_wb_tail',
    'access arguments' => array('access content'),
  );
  $items['evaluation'] = array(
    'title' => 'Show evaluations', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_evaluation',
    'access arguments' => array('access content'),
  );
  $items['runevaluations'] = array(
    'title' => 'Run Evaluations',
    'type' => MENU_CALLBACK,
    'page callback' => 'recsys_wb_run_evaluations',
    'access arguments' => array('access content'),
  );
    $items['evaluatealgorithms'] = array(
    'title' => 'Evaluate Algorithms', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_evaluate_algorithms',
    'access arguments' => array('administrator'),
  );
  $items['explanation'] = array(
    'title' => 'Explanation', 
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'recsys_wb_explanation',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Custom page which displays all the ratings of the currently logged in user
 */
function recsys_wb_myratings() {
  // Prepare the return string
  $return_string = "<h2>Books</h2>";
  
  // Get all the users rating from the database
  $query = db_select(BOOK_DB_TRAIN, 'ratings');
  $query->join(
    'field_data_field_book_id',
    'book_id',
    'ratings.bookid = book_id.field_book_id_value'
  );
  $query->join( 
    'field_data_field_dataset',
    'dataset',
    'dataset.entity_id = book_id.entity_id'
  );
  $query->join('node','node','node.nid = book_id.entity_id');
  $query->fields('node',array('title','nid'));
  $query->fields('ratings',array('bookid','userid','rating'));
  $query->condition('ratings.userid',user_id);
  $query->condition('dataset.field_dataset_value','99');
  $results = $query->execute();
  
  // Prepeare the tables headers and rows
  $header = array( t('User ID'), t('Book'), t('Rating') );
  $rows = array();
  
  // Check if there are already some ratings
  if( $results->rowCount() == 0 ) {
    $return_string .= "<strong>You haven't rated any books yet</strong></br>";
    // Add the link to the rating page
    $return_string .= "<p>You can rate books " . l('here','books') . "</p>";
  }
  else {
    
    // Loop through the results of the DB query and fill in the tables rows
    foreach ($results AS $result)
    {
      $rows[] = array(
        $result->userid,
        l($result->title, 'node/' . $result->nid),
        $result->rating,
      );
    }
    
    // Add the table to the result string
    $return_string .= theme('table', 
                            array('header' => $header, 'rows' => $rows) );
    // Add a link to run recommendation algorithms
    $return_string .= l('Calculate recommendations','runrecommender');
  }

  // Add the Movie section
  $return_string .= "<h2>Movies</h2>";
  
  // Get all the users rating from the database
  $query = db_select(MOVIE_DB_TRAIN, 'ratings');
  $query->join(
    'field_data_field_movie_id',
    'movie_id',
    'ratings.movieid = movie_id.field_movie_id_value'
  );
  $query->join('node','node','node.nid = movie_id.entity_id');
  $query->fields('node',array('title','nid'));
  $query->fields('ratings',array('movieid','userid','rating'));
  $query->condition('ratings.userid',user_id);
  $results = $query->execute();
  
  // Prepeare the tables headers and rows
  $header = array( t('User ID'), t('Movie'), t('Rating') );
  $rows = array();
  
  // Check if there are already some ratings
  if( $results->rowCount() == 0 ) {
    $return_string .= "<strong>You haven't rated any movies yet</strong></br>";
    // Add the link to the rating page
    $return_string .= "<p>You can rate movies " . l('here','movies') . "</p>";
  }
  else {
    
    // Loop through the results of the DB query and fill in the tables rows
    foreach ($results AS $result)
    {
      $rows[] = array(
        $result->userid,
        l( $result->title, 'node/' . $result->nid),
        $result->rating,
      );
    }
    
    // Add the table to the result string
    $return_string .= theme('table', 
                            array('header' => $header, 'rows' => $rows) );
    // Add a link to run recommendation algorithms
    $return_string .= l('Calculate recommendations','runrecommender');
  }
  
  // Return the HTML string
  return $return_string;
}

/**
 * Custom page which displays all the recommendations of the currently logged
 * in user
 */
function recsys_wb_myrecommendations() {
  return showRecommendations();
}

/**
 * Custom page which displays all the recommendations of the currently logged
 * in user
 */
function recsys_wb_evaluation() {
  return showEvaluation();
}

/**
 * 
 */
function recsys_wb_run_evaluations() {
  runEvaluations();
}

/**
 * 
 */
function recsys_wb_evaluate_algorithms() {
  return drupal_get_form('recsys_wb_evaluate_algorithms_form');
}
 
/**
 * Implements hook_block_info
 */
function recsys_wb_block_info() {
  $blocks['book_rating'] = array(
    'info' => t('Recsys workbench book rating'),
  );
  $blocks['movie_rating'] = array(
    'info' => t('Recsys workbench movie rating'),
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view
 */
function recsys_wb_block_view($delta = '')
{
  $block = array();

  // Get the node
  $node = menu_get_object();

  switch ($delta) {
    case 'book_rating':
      $block['subject'] = t('Rate this book');
      
      // Check if the user has already rated this book, so query the rating for
      // this book from this user
      $book_id = field_get_items("node", $node, "field_book_id");
      $book_id = $book_id[0]["value"];
      $results = db_query("Select * from {" . BOOK_DB_TRAIN . "} where UserID ="
        .":user AND BookID = :book", 
        array(':user' => user_id, ':book' => $book_id) );
      
      if ( $results->rowCount() == 0 ) {
        $block['content'] = drupal_get_form('recsys_wb_book_rating_form');
      }
      else {
        $block['content'] = "You have already rated this book!";
      }

      break;

    case 'movie_rating':
      $block['subject'] = t('Rate this movie');
      
      // Check if the user has already rated this book, so query the rating for
      // this book from this user
      $movie_id = field_get_items("node", $node, "field_movie_id");
      $movie_id = $movie_id[0]["value"];
      $results = db_query("Select * from {" . MOVIE_DB_TRAIN . "} where UserID="
        .":user AND MovieID = :movie", 
        array(':user' => user_id, ':movie' => $movie_id) );
      
      if ( $results->rowCount() == 0 ) {
        $block['content'] = drupal_get_form('recsys_wb_movie_rating_form');
      }
      else {
        $block['content'] = "You have already rated this movie!";
      }
      
      default:
        break;
  }
    
  return $block;
}

/**
 * Custom page which displays all book of the demo section
 */
function recsys_wb_books() {
  // Get all movies form the database
  $query = db_select('field_data_field_dataset', 'dataset')
    ->extend('PagerDefault')->limit(100);
  $query->join('node', 'node', 'dataset.entity_id = node.nid');
  $query->fields('dataset',array('entity_id'));
  $query->fields('node',array('title'));
  $query->orderBy('node.title');
  $query->condition('dataset.field_dataset_value',99);

  $results = $query->execute();
  
  $header = array( t('Book'));
  $rows = array();
  
  foreach ($results AS $result)
  {
    $rows[] = array(
      l($result->title,'node/' . $result->entity_id)
    );
  }
    

  $output =  theme('table', array('header' => $header, 'rows' => $rows) );
  return $output . theme('pager');
}

/**
 * Custom page which displays all movies of the demo section
 */
function recsys_wb_movies() {
  // Get all movies form the database
  $query = db_select('field_data_field_year', 'year')
    ->extend('PagerDefault')->limit(100);
  $query->join('node', 'node', 'year.entity_id = node.nid');
  $query->fields('year',array('entity_id'));
  $query->fields('node',array('title'));
  $query->orderBy('node.title');
  $query->condition('year.field_year_value',2008);
  $results = $query->execute();
  
  $header = array( t('Node ID'));
  $rows = array();
  
  foreach ($results AS $result)
    {
      $id = $result->entity_id;
      $rows[] = array(
        l($result->title,'node/' . $id)
      );
    }

  $output =  theme('table', array('header' => $header, 'rows' => $rows) );
  return $output . theme('pager');
}

/**
 * Custom page to run recommenders
 */
function recsys_wb_run_recommender() {
  return drupal_get_form('recsys_wb_run_recommender_form');
}

/** 
 * Currently just a test
 */
function recsys_wb_tail() {
  /**
   * Initilize a new instance of PHPTail
   * @var PHPTail
   */
  // Get the UUID of the log file
  $uuid = $_GET['uuid'];
  // Get the log directory
  $log_dir = DRUPAL_ROOT . DIRECTORY_SEPARATOR 
    . drupal_get_path("module","recsys_wb") . DIRECTORY_SEPARATOR . "log";
  // Get the according file
  $file = $log_dir . DIRECTORY_SEPARATOR . $uuid . ".log";
  // Check if the file exists, if not return some error message
  if ( ! file_exists ( $file ) )
    return "Invalid file: " . $file;
  $tail = new PHPTail($file);
  $tail = $tail->setOrigin(0);

  /**
   * We're getting an AJAX call
   */
  if(isset($_GET['ajax']))  {
    echo $tail->getNewLines($_GET['lastsize'], $_GET['grep'], $_GET['invert']);
    die();
  }
  /**
   * Regular GET/POST call, print out the GUI
   */
  $tail->generateGUI();
}

/**
 * 
 */
function recsys_wb_explanation() {
  $algorithm_name = null;
  $explain = "";
  $marking = MARK_USER2USER;
  
  // Check if the GET[algorithm] method is set
  if ( isset($_GET['algorithm']) )
    $algorithm_name = getRecommenderAppName( $_GET['algorithm'] );
  
  if ( $algorithm_name != null )
    $explain = "<h2>" . getRecommenderAppTitle( $_GET['algorithm'] ) . "</h2>";
  
  $explain_user2user = preg_match("/_u2u_/", $algorithm_name);
  $explain_item2item = preg_match("/_i2i_/", $algorithm_name);
  $explain_cosine = preg_match("/_cosine/", $algorithm_name);
  $explain_euclidean = preg_match("/_euclidean/", $algorithm_name);
  $explain_pearson = preg_match("/_pearson/", $algorithm_name);
  
  if( $explain_user2user || $algorithm_name == null )
    $explain .= recsys_wb_explain_user2user();
  
  if ( $explain_item2item )
  {
    $explain .= recsys_wb_explain_item2item();
    $marking = MARK_ITEM2ITEM;
  }
  else{
    if ( $algorithm_name == null )
      $explain .= recsys_wb_explain_item2item();
  }

  if ( $explain_cosine || $algorithm_name == null )  
    $explain .= recsys_wb_explain_cosine($marking);

  if ( $explain_euclidean || $algorithm_name == null )
    $explain .= recsys_wb_explain_euclidean($marking);
  
  if ( $explain_pearson || $algorithm_name == null )
    $explain .= recsys_wb_explain_pearson($marking);
  
  return $explain;
}
